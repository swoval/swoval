// Do not edit this file manually. It is autogenerated.

package com.swoval.files

import com.swoval.functional.Filters.AllPass
import com.swoval.files.Executor.ThreadHandle
import com.swoval.files.FileTreeDataViews.Entry
import com.swoval.functional.Either
import java.io.IOException
import java.nio.file.Path
import java.util.Iterator

class FileCachePathWatcher[T <: AnyRef](private val tree: FileCacheDirectoryTree[T],
                                        private val pathWatcher: PathWatcher[PathWatchers.Event]) {

  private val symlinkWatcher: SymlinkWatcher = tree.symlinkWatcher

  def register(path: Path, maxDepth: Int, threadHandle: ThreadHandle): Boolean = {
    val dir: CachedDirectory[T] =
      tree.register(path, maxDepth, pathWatcher, threadHandle)
    if (dir != null && symlinkWatcher != null) {
      val it: Iterator[Entry[T]] =
        dir.listEntries(dir.getMaxDepth, AllPass).iterator()
      while (it.hasNext) {
        val entry: FileTreeDataViews.Entry[T] = it.next()
        if (entry.isSymbolicLink) {
          val depth: Int = path.relativize(entry.getPath).getNameCount
          symlinkWatcher.addSymlink(entry.getPath,
                                    if (maxDepth == java.lang.Integer.MAX_VALUE) maxDepth
                                    else maxDepth - depth,
                                    threadHandle)
        }
      }
    }
    dir != null
  }

  def unregister(path: Path, threadHandle: ThreadHandle): Unit = {
    tree.unregister(path, threadHandle)
    pathWatcher.unregister(path)
  }

  def close(threadHandle: ThreadHandle): Unit = {
    pathWatcher.close()
    symlinkWatcher.close()
  }

}
